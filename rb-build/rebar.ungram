// Rebar Un-Grammar.
//
// This grammar specifies the structure of Rebar's concrete syntax tree.
// It does not specify parsing rules (ambiguities, precedence, etc are out of scope).
// Tokens are processed -- contextual keywords are recognised, compound operators glued.
//
// Legend:
//
//   //          -- comment
//   Name =      -- non-terminal definition
//   'ident'     -- token (terminal)
//   A B         -- sequence
//   A | B       -- alternation
//   A*          -- zero or more repetition
//   A?          -- zero or one repetition
//   (A)         -- same as A
//   label:A     -- suggested name for field of AST node

Name = 'ident'

Expr =
  'integer' |
  'string' |
  Call |
  Block

Block = '{' Stmt* '}'

Type = Name

Call = Expr '(' ')'
Stmt = Def | Struct | Expr

Def = 'def' Name ArgsDef Block
Struct = 'struct' Name StructBlock

ArgsDef = '(' Name ':' Type ',' (Name ':' Type)* ')'

StructBlock = '{' StructItem* '}'
StructItem = Property | Def | ConstructorDef
ConstructorDef = 'constructor' ArgsDef Block

Property = Name ':' Type

SourceFile = Stmt*

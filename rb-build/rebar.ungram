// Rebar Un-Grammar.
//
// This grammar specifies the structure of Rebar's concrete syntax tree.
// It does not specify parsing rules (ambiguities, precedence, etc are out of scope).
// Tokens are processed -- contextual keywords are recognised, compound operators glued.
//
// Legend:
//
//   //          -- comment
//   Name =      -- non-terminal definition
//   'ident'     -- token (terminal)
//   A B         -- sequence
//   A | B       -- alternation
//   A*          -- zero or more repetition
//   A?          -- zero or one repetition
//   (A)         -- same as A
//   label:A     -- suggested name for field of AST node

Name = 'ident'

BinaryOp = '+' | '-' | '*' | '/' | '%' | '==' | '!=' | '<' | '<=' | '>' | '>=' | '&&' | '||' | '&' | '|'
PrefixOp = '-' | '!'
PostfixOp = '-' // TODO
TypeOp = '|'

Literal = 'integer' | 'float' | 'true' | 'false' | 'nil'

Expr =
  Literal |
  Name |
  String |
  CallExpr |
  IndexExpr |
  FieldExpr |
  PrefixExpr |
  PostfixExpr |
  BinaryExpr |
  IfExpr |
  ParenExpr |
  ArrayExpr |
  StructExpr |
  Block

String = '"' 'char'* Escape* Interpolation* '"'
Escape = '\\' 'ident'
Interpolation = '#' '{' Expr '}'

FieldExpr = Expr '.' Name
PrefixExpr = PrefixOp Expr
PostfixExpr = PostfixOp Expr
BinaryExpr = Expr BinaryOp Expr

IfExpr = 'if' Expr Block ('else' 'if' Expr Block)* ('else' Block)?

ParenExpr = '(' Expr ')'
ArrayExpr = '[' Expr* ']'
Block = '{' Stmt* '}'

Type = NameType | BinaryType

NameType = 'ident' | 'nil'
BinaryType = Type TypeOp Type

CallExpr = Expr '(' ArgList ')'
ArgList = Expr (',' Expr)*

IndexExpr = Expr '[' Expr ']'

StructExpr = Expr '{' FieldInit* '}'
FieldInit = 'ident' ':' Expr

ExprStmt = Expr
Stmt = Let | Assign | Def | Struct | ExprStmt

Let = 'let' 'ident' (':' Type)? '=' Expr
Assign = Expr '=' Expr

Def = 'def' 'ident' Params Block
Struct = 'struct' 'ident' StructBlock

Params = '(' Param* ')' ReturnType?
Param = 'ident' ':' Type
ReturnType = '->' Type

StructBlock = '{' StructItem* '}'
StructItem = Field | Def | ConstructorDef
ConstructorDef = 'constructor' Params Block

Field = 'ident' ':' Type

SourceFile = Stmt*

// FIXME: Get rid of this hack. `nl` should be part of `SyntaxKind`, but not part of the grammar.
always_make_nl = 'nl' | '!'
